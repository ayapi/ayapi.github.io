<?xml version="1.0" encoding="UTF-8"?>
<rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[ayapi.github.io]]></title><description><![CDATA[ぁゃぴがプログラミングのことをかくブログ]]></description><link>http://ayapi.github.io</link><generator>RSS for Node</generator><lastBuildDate>Thu, 27 Mar 2014 18:22:37 GMT</lastBuildDate><atom:link href="http://ayapi.github.io/feed.xml" rel="self" type="application/rss+xml"/><author><![CDATA[ぁゃぴ]]></author><pubDate>Thu, 27 Mar 2014 18:22:37 GMT</pubDate><copyright><![CDATA[2014 ぁゃぴ]]></copyright><language><![CDATA[en]]></language><managingEditor><![CDATA[ぁゃぴ]]></managingEditor><webMaster><![CDATA[ぁゃぴ]]></webMaster><ttl>60</ttl><item><title><![CDATA[JSオジサン＃1 LT「node-webkitとchrome-remote-interfaceでブラウザオートメーション」]]></title><description><![CDATA[<p>渋谷21Cafeで開催された、「<a href="http://atnd.org/events/48368">JSオジサン ＃1</a>」<br>ぁゃぴ、⑤分間のLTとゅーことで、人生初プレゼンさせてもらぃました</p>
<p>その時に映してもらってたスライドと、<br>ぁとで反省するために自分で録音をしてたから、それを公開します</p>
<p><div style="margin-bottom:5px"> <strong> <a href="https://www.slideshare.net/HatanoAya/js1-32817077" title="node-webkit &amp; chrome-remote-interfaceでブラウザオートメーション" target="_blank">slideshare: node-webkit &amp; chrome-remote-interfaceでブラウザオートメーション</a> </strong></div><iframe src="http://www.slideshare.net/slideshow/embed_code/32817077?rel=0" width="425" height="355" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC; border-width:1px 1px 0; margin-bottom:5px; max-width: 100%;" allowfullscreen> </iframe></p>
<iframe width="100%" height="166" scrolling="no" frameborder="no" src="https://w.soundcloud.com/player/?url=https%3A//api.soundcloud.com/tracks/141721359&amp;color=ff00db&amp;auto_play=false&amp;hide_related=false&amp;show_artwork=true"></iframe>

<p>㊢メも、許可もらぇたら、またここに載せます↑↑</p>
]]></description><link>http://ayapi.github.io/posts/jsojisan1/</link><guid isPermaLink="true">http://ayapi.github.io/posts/jsojisan1/</guid><category><![CDATA[JavaScript]]></category><category><![CDATA[Node]]></category><dc:creator><![CDATA[ぁゃぴ]]></dc:creator><pubDate>Thu, 27 Mar 2014 17:05:00 GMT</pubDate></item><item><title><![CDATA[node-retryとasync.seriesをっかって非同期逐次処理の再試行]]></title><description><![CDATA[<p>Node.jsにぉぃて、非同期で取ってきたデータを基にして、<br>また更に非同期処理をして、成功したらまた非同期処理をして、<br>とかゅーのを考ぇます</p>
<h2><a name="caolan/async%E3%81%A7%E9%80%90%E6%AC%A1%E5%87%A6%E7%90%86%E3%82%92%E3%81%8B%E3%81%83%E3%81%A6%E3%81%BF%E3%82%8B" class="anchor" href="#caolan/async%E3%81%A7%E9%80%90%E6%AC%A1%E5%87%A6%E7%90%86%E3%82%92%E3%81%8B%E3%81%83%E3%81%A6%E3%81%BF%E3%82%8B"><span class="header-link"></span></a>caolan/asyncで逐次処理をかぃてみる</h2>
<p>この場合のコントロールフローとしてゎ<br><a href="https://github.com/caolan/async">caolan/async</a>の<code>series()</code>ゃ<code>waterfall()</code>がぃぃと思ぃます</p>
<pre><code class="lang-bash"><div class="highlight"><pre>npm install async --save
</pre></div>
</code></pre>
<p><code>async.series()</code>をっかってかくと、こんなふうになります</p>
<p><code data-gist-id="9257773" data-gist-hide-footer="true" data-gist-hide-line-numbers="true"><a href="https://gist.github.com/ayapi/9257773">https://gist.github.com/ayapi/9257773</a></code></p>
<p>サンプルなので<code>setTimeout()</code>で結果を渡すょーにしてますが、<br>実際にゎ、httpリクエストとかのコールバックで<code>done</code>を呼びます</p>
<p><code>get</code>が1秒後に成功してから、<code>send</code>が実行されます<br>けど<code>send</code>でゎ1秒後に必ずエラーが発生して、<br><code>save</code>ゎ実行されずにぉゎり、とゅーかんじです</p>
<p>出力ゎ以下のょーになります</p>
<pre><code class="lang-bash"><div class="highlight"><pre>get
send
send:failed
</pre></div>
</code></pre>
<h2><a name="node-retry%E3%81%A7%E5%86%8D%E8%A9%A6%E8%A1%8C%E5%87%A6%E7%90%86%E3%82%92%E8%BF%BD%E5%8A%A0%E3%81%99%E3%82%8B" class="anchor" href="#node-retry%E3%81%A7%E5%86%8D%E8%A9%A6%E8%A1%8C%E5%87%A6%E7%90%86%E3%82%92%E8%BF%BD%E5%8A%A0%E3%81%99%E3%82%8B"><span class="header-link"></span></a>node-retryで再試行処理を追加する</h2>
<p>ネットワークが不安定だったりすると、リトライ処理をしたくなります<br>成功するまで何回もゃらせて、けどN回連続で失敗したら、<br>ちょっともぅぁきらめる、ってかんじのゃっです</p>
<p><a href="https://github.com/tim-kos/node-retry">tim-kos/node-retry</a>ゎ、<br>日本語の情報がほとんどなぃんですけど、<br>リトライ処理をかんたんにかけるライブラリです</p>
<p>これをっかって、さっきの<code>async.series()</code>のコードに<br>再試行処理を追加してみます</p>
<pre><code class="lang-bash"><div class="highlight"><pre>npm install retry --save
</pre></div>
</code></pre>
<p>オプションで、再試行回数の上限と、<br>失敗してから再試行するまでにちょっと時間を空けるってゅー、<br>待ち時間に関する設定ができます</p>
<p>再試行の回数が増ぇてぃくごとに、<br>待ち時間を長くしてぃくょーな挙動がデフォルトみたぃです<br>ぁたまぃぃーって思ぃます↑</p>
<p>けど今回ゎ「そーゅーのぃぃから」ってなったので、なしにしてみます</p>
<p><code data-gist-id="9256588" data-gist-line="2,22-26" data-gist-hide-line-numbers="true"><a href="https://gist.github.com/ayapi/9256588#file-retryseries-js-L22-L26">https://gist.github.com/ayapi/9256588#file-retryseries-js-L22-L26</a></code></p>
<p>今回のサンプルだと、<code>send</code>で失敗するまでに、<br><code>get</code>で取ってこれるデータの状態が変ゎってるかもしれなぃ、<br>とか考ぇはじめると、<code>send</code>で失敗しちゃった時にゎ、<br>最初に戻ってゃり直したぃ、ってなったりします</p>
<p>そーゅーのゎ、<code>async.series()</code>をまるごと、<br><code>operation.attempt()</code>に入れたらできます</p>
<p><code data-gist-id="9256588" data-gist-line="28-40" data-gist-hide-line-numbers="true"><a href="https://gist.github.com/ayapi/9256588#file-retryseries-js-L28-L40">https://gist.github.com/ayapi/9256588#file-retryseries-js-L28-L40</a></code></p>
<p><code>operation.retry(err)</code>ゎ、<br>引数<code>err</code>にエラーオブジェクトが渡された時にゎ、<br>再試行回数の上限をチェックして、<br>まだゃるなら<code>true</code>、ぁきらめるなら<code>false</code>を返します<br>そして<code>true</code>なら<code>operation.attempt()</code>が再び呼ばれます</p>
<p>引数<code>err</code>がエラーオブジェクトじゃなぃ時ゎ、<br><code>false</code>を返します</p>
<p>っまり、<code>false</code>が返る時ゎ、<br>結果ゎどーぁれ、ぉゎる時、とゅーことです</p>
<p><code>operation.mainError()</code>ゎ、ぃちばん多くでたエラーを返すみたぃです<br><code>error.message</code>の内容にょってカウントしてるみたぃです<br>今回ゎ毎回<code>&#39;send:failed&#39;</code>なのでぁんまり意味なぃですけど、<br>実際にっかぅ時ゎ、<br>試行回数が重なればエラーの内容もちがぅ場合もぁりぇますので<br>こーゅー便利メソッドが用意されてるみたぃです</p>
<h2><a name="%E5%AE%8C%E6%88%90%E3%81%B0%E3%82%93" class="anchor" href="#%E5%AE%8C%E6%88%90%E3%81%B0%E3%82%93"><span class="header-link"></span></a>完成ばん</h2>
<p>てことで、かけたコードゎこれです＼(^o^)／</p>
<p><code data-gist-id="9256588"><a href="https://gist.github.com/ayapi/9256588">https://gist.github.com/ayapi/9256588</a></code></p>
<p>出力ゎ以下のょーになります</p>
<pre><code class="lang-bash"><div class="highlight"><pre>get
send
get
send
get
send
get
send
get
send
send:failed
</pre></div>
</code></pre>
]]></description><link>http://ayapi.github.io/posts/retryseries/</link><guid isPermaLink="true">http://ayapi.github.io/posts/retryseries/</guid><category><![CDATA[Node]]></category><category><![CDATA[JavaScript]]></category><dc:creator><![CDATA[ぁゃぴ]]></dc:creator><pubDate>Thu, 27 Feb 2014 19:21:00 GMT</pubDate></item><item><title><![CDATA[メールをトリガーにした処理がかんたんにかけるNode.jsの「inbox」]]></title><description><![CDATA[<p>今回ゎとてもひさびさに、メール受信時にその内容を処理するってゅー、<br>ぃゎゅる空メール登録みたぃな、ぁれが必要になりました</p>
<p>まじ大昔にqmailとphpのパイプでそのへんがんばってたことがぁって、<br>そのゃりかたゎなんとなく今でもぉぼぇてるんですけど、<br>Node.jsでIMAPでとてもかんたんに似たょーなのがかけたから、<br>ゃりかたをちょっとかきます</p>
<h2><a name="imapnode-js" class="anchor" href="#imapnode-js"><span class="header-link"></span></a>IMAPを扱ぅNode.jsライブラリ</h2>
<p><a href="https://github.com/mscdex/node-imap">node-imap</a>とゅーのがメジャーっぽぃんですけど、<br>けど<a href="https://github.com/andris9/inbox">inbox</a>のほーが、ぱっとゎかりゃすかったから、<br>こっちをっかってみることにしました</p>
<h2><a name="inbox" class="anchor" href="#inbox"><span class="header-link"></span></a>inboxをっかってみる</h2>
<p>まずゎインストールですけど、むずかしぃことゎなにもぁりません</p>
<pre><code class="lang-bash"><div class="highlight"><pre>npm install inbox --save
</pre></div>
</code></pre>
<p>それで、IMAP接続して、メールボックスを開くょーにします</p>
<p><code data-gist-hide-line-numbers="true" data-gist-id="8770396" data-gist-line="1-16,44"><a href="https://gist.github.com/ayapi/8770396#file-imapandsmtp-js-L1-L16">https://gist.github.com/ayapi/8770396#file-imapandsmtp-js-L1-L16</a> <a href="https://gist.github.com/ayapi/8770396#file-imapandsmtp-js-L44">https://gist.github.com/ayapi/8770396#file-imapandsmtp-js-L44</a></code></p>
<p>で、inboxゎ、ぁたらしぃメールがくると、<br><code>new</code>イベントを<code>emit</code>してくれます</p>
<p><code data-gist-hide-line-numbers="true" data-gist-id="8770396" data-gist-line="18-22,42"><a href="https://gist.github.com/ayapi/8770396#file-imapandsmtp-js-L1-L16">https://gist.github.com/ayapi/8770396#file-imapandsmtp-js-L1-L16</a> <a href="https://gist.github.com/ayapi/8770396#file-imapandsmtp-js-L42">https://gist.github.com/ayapi/8770396#file-imapandsmtp-js-L42</a></code></p>
<p>たったこれだけでかんたんです</p>
<p>ほかにも、このままだとメールがひたすらたまってぃっちゃぅから、<br>消す処理とかゎ必要なんですけど</p>
<h2><a name="nodemailer" class="anchor" href="#nodemailer"><span class="header-link"></span></a>ぉまけ：Nodemailerで返事をだすょーにしてみる</h2>
<p>受信＆保存するだけだと「は？なに？」ってかんじなので、<br>てきとーにSMTPで返事をだすょーにしてみます<br>inboxと同じ作者さんで<a href="https://github.com/andris9/Nodemailer">Nodemailer</a>てゅーメール送信のライブラリがぁります</p>
<pre><code class="lang-bash"><div class="highlight"><pre>npm install nodemailer --save
</pre></div>
</code></pre>
<p><code data-gist-hide-line-numbers="true" data-gist-id="8770396" data-gist-line="18-42"><a href="https://gist.github.com/ayapi/8770396#file-imapandsmtp-js-L1-L16">https://gist.github.com/ayapi/8770396#file-imapandsmtp-js-L1-L16</a></code></p>
<p>かんたんすぎじゃん＼(^o^)／</p>
<h2><a name="" class="anchor" href="#"><span class="header-link"></span></a>まとめ</h2>
<p>このょーに、fromアドレスを拾ぅだけでぁれば、とてもかんたんです</p>
<p>IMAPに対応してるメールアカウントがぁればそれでょくて、<br>メールサーバー側のほーの設定が特にぃらなぃから、ぉ手軽なかんじがします</p>
<h2><a name="" class="anchor" href="#"><span class="header-link"></span></a>更に突っ込んでぃくなら</h2>
<p>もしたとぇばメールの内容でブログを投稿するみたぃな、<br>メールのタイトルゃ本文の内容をなにかしょーとするなら<br>まぁもぅこれぉ決まりなんですけど、<br>メールのストラクチャのパーシングと、<br>日本語特有の文字エンコード関係の処理に<br>果敢に立ち向かぅ必要がぁりますので、多少ハードルゎぁがります<br>気が向ぃたらそのへんも、今度かくかもしれません</p>
<p>なんかphpにゎマルチバイト文字列の変換の関数が<br>しっかり用意されてたのがょかったなーって思ぃますけど、<br>Node.jsゎそのへんちょっとたぃへんかも</p>
]]></description><link>http://ayapi.github.io/posts/observingimaponnode/</link><guid isPermaLink="true">http://ayapi.github.io/posts/observingimaponnode/</guid><category><![CDATA[Node]]></category><category><![CDATA[JavaScript]]></category><dc:creator><![CDATA[ぁゃぴ]]></dc:creator><pubDate>Sun, 02 Feb 2014 11:58:00 GMT</pubDate></item><item><title><![CDATA[WindowsのNode.jsでOpenCV opencv-node編]]></title><description><![CDATA[<h2><a name="opencvとゎ" class="anchor" href="#opencvとゎ"><span class="header-link"></span></a>OpenCVとゎ</h2>
<p>Intelがだしてる画像処理のライブラリで、顔認識ができたりで有名です</p>
<h2><a name="node" class="anchor" href="#node"><span class="header-link"></span></a>Node.jsでOpenCVが使ぇる、opencv-node</h2>
<p><a href="https://github.com/codeboost/opencv-node">opencv-node</a>ゎその名のとーり、<br>Node.jsでOpenCVをかんたんに扱ぇるょーにしてくれるライブラリです</p>
<p>…ここまで、前回の記事とほとんど同じなんですけど<br>前回記事：<a href="/posts/node-opencvonwin8x64">WindowsのNode.jsでOpenCV node-opencv編</a></p>
<h2><a name="node-opencvとopencv-nodeのちがぃ" class="anchor" href="#node-opencvとopencv-nodeのちがぃ"><span class="header-link"></span></a>node-opencvとopencv-nodeのちがぃ</h2>
<p>node-opencvとopencv-nodeゎ、名前ゎ似ててもまったく別物です<br>なんでopencv-nodeをっかぉーと思ったかとゅーと</p>
<p>node-opencvゎ、人気で、GitHubも活発ですが<br>「まじかんたんに顔認識できた！ぁげー↑↑」<br>みたぃなノリ一発なかんじで、<br>かんたんさを売りにしてるかんじです<br>けど、まじめにOpenCVのリファレンスなどをみたりしながら<br>OpenCVのコードをC++版ゃPython版と同じょーに書ぃてみょぅ、<br>とゅー使ぃ方にゎ向ぃてなぃとかんじました<br>ょーするに、ちょっとチャラすぎるだろと</p>
<p>opencv-nodeゎ、ぜん②人気なぃっぽぃんですけど、<br>かなり忠実なラッパーとゅー印象です<br>それでも完全でゎなぃんですけど、<br>でも本家OpenCVにぁるメソッドをそのままNodeでかけるょーに<br>カバーしょぅとぃぅ姿勢がちゃんとぁるかんじです<br>ぁゃぴゎ、こっちがメインストリームでぁるべきだと思ぅんですけど</p>
<h2><a name="windowsのnode" class="anchor" href="#windowsのnode"><span class="header-link"></span></a>WindowsのNode.jsにopencv-nodeを入れる方法</h2>
<p>opencv-nodeゎ一応Windowsでのテストもされてるみたぃですが<br>そのテスト環境がたぶんちょっと古ぃかんじで、<br>最近のVisual Studioのバージョンでビルドが通らなぃから、<br>今回ゎそこを解決する方法をまとめてみました</p>
<p>ぁゃぴの環境ゎWindows8 64bitです</p>
<h3><a name="pythonのインストール" class="anchor" href="#pythonのインストール"><span class="header-link"></span></a>Pythonのインストール</h3>
<p><a href="http://www.python.org/getit/">Python2.7.6</a><br>環境変数<code>Path</code>に<code>C:\Python27</code>を追加して、<br>環境変数<code>PYTHONPATH</code>に<code>C:\Python27\Lib\site-packages</code>を指定</p>
<h3><a name="visual studio expressのインストール" class="anchor" href="#visual studio expressのインストール"><span class="header-link"></span></a>Visual Studio Expressのインストール</h3>
<p><a href="http://www.microsoft.com/ja-jp/download/details.aspx?id=34673">Microsoft Visual Studio C++ 2012 for Windows Desktop Express</a><br>もしくゎ<br><a href="http://www.microsoft.com/ja-jp/download/details.aspx?id=40787">Microsoft Visual Studio C++ 2013 for Windows Desktop Express</a></p>
<p>どーもnode-gyp界隈で2012ゎ非推奨エアーになってきてるみたぃです<br>参考：<a href="https://github.com/TooTallNate/node-gyp/issues/154#issuecomment-30200499">github - TooTallNate/node-gyp - issue:154</a></p>
<p>ただし2013をっかぅ場合ゎ、<br>現状最新のOpenCVでも2013用のPrebuiltを配布してなぃので、<br>CMakeとVisual Studioをっかって、<br>自分でOpenCVをビルドをする必要がぁります</p>
<p>ぁゃぴゎ2012も2013もどっちもためしました</p>
<h3><a name="opencvのインストール" class="anchor" href="#opencvのインストール"><span class="header-link"></span></a>OpenCVのインストール</h3>
<p><a href="http://opencv.org/downloads.html">OpenCV for Windows</a>をインストールします<br>Visual Studio 2012用だったらv2.4.4以降のどれか<br>v2.4.3以前だと2012用のPrebuiltが入ってなぃです<br>Visual Studio 2013用だったら最新(現在v2.4.7)をとってきます</p>
<p>自己解凍形式で、どこに解凍するか聞かれるので、<br><code>C:\</code>とかゎかりゃすぃすきなとこを指定します</p>
<p>環境変数<code>OPENCV_ROOT</code>に<code>C:/opencv</code>を追加します</p>
<h3><a name="opencvのビルド" class="anchor" href="#opencvのビルド"><span class="header-link"></span></a>OpenCVのビルド</h3>
<p>㊤までの説明での「Prebuiltがなぃ」場面でゎ<br>以下のページの手順に従ってビルドをします<br><a href="http://imagingsolution.net/program/opencv/build_opencv231_static_library/">OpenCVをスタティックリンクライブラリでビルドする方法 - イメージングソリューション</a></p>
<p>CMakeでVisual Studioのバージョンを選択する場面でゎ<br>VS2013ならVS12、VS2012ならVS11を選択します(ゃゃこしぃ)</p>
<p>Visual Studioでのビルドをするまでをゃればょくて、<br>後半からの使用方法の部分ゎ関係ぁりません</p>
<p>たとぇばこの手順でVS2013向けにビルドした場合ゎ<br>ぁらたに生成された<code>C:/opencv/userbuild/install/x64/vc12</code><br>をっかぅことになります</p>
<h3><a name="node、npm、node-gypのバージョンを確認" class="anchor" href="#node、npm、node-gypのバージョンを確認"><span class="header-link"></span></a>node、npm、node-gypのバージョンを確認</h3>
<p>node v0.10.23以降 &amp; npm 1.3.17以降にします<br>その㊤で、node-gypを最新にします</p>
<h3><a name="opencv-nodeのインストール" class="anchor" href="#opencv-nodeのインストール"><span class="header-link"></span></a>opencv-nodeのインストール</h3>
<p>まず、普通なら使ぃたぃプロジェクトのディレクトリで<br><code>npm install -g opencv-node</code>をゃるんですけど、<br>ぁゃぴが試したv0.2.6でゎ<br>赤文字が大量に出て、インストールに失敗しました</p>
<p>ソースをぃじらなぃとだめっぽぃと思ったので、forkしちゃぃました<br><a href="https://github.com/ayapi/opencv-node/tree/msvs2012-2013">github - ayapi/opencv-node - branch:msvs2012-2013</a></p>
<p>ぁゃぴfork版をっかぅ時ゎ、<br>いったんとってきて、ブランチを切り替ぇてくださぃ</p>
<pre><code class="lang-bash"><div class="highlight"><pre>git clone git@github.com:ayapi/opencv-node.git
<span class="nb">cd </span>opencv-node
git checkout msvs2012-2013
</pre></div>
</code></pre>
<p>そしたらnode-gyp用の設定ファイル<code>binding.gyp</code>を<br>環境にぁゎせて編集してくださぃ</p>
<p><code>/build/x64/vc11/staticlib</code>となってる部分ゎ、<br>これゎVS2012用のPrebuiltのパスになってます<br>自分でOpenCVをビルドした場合ゎ<br>さっきの例だと<code>/userbuild/install/x64/vc12/staticlib</code>とかにします<br><code>x64/vc12</code>の部分ゎ<br>VS2013なら<code>x64/vc12</code>、VS2012なら<code>x64/vc11</code>にします(ゃゃこしぃ)</p>
<p><code>libraries</code>で指定されてるファイルたちゎ、<br>ファイル名の末尾が<code>244.lib</code>でぉゎってるものゎ<br>OpenCVのバージョンにょって変ゎってくるので<br>たとぇばOpenCV v2.4.7なら<code>247.lib</code>にぜんぶreplaceしてくださぃ</p>
<p>で、そしたらインストールしてみます</p>
<pre><code class="lang-bash"><div class="highlight"><pre>npm install -g ./
</pre></div>
</code></pre>
<p>すると、ビルドがはじまって、<br>ゃたら黄色ぃ警告がでますが、赤じゃなければへーきです</p>
<p>これでひとまずインストールゎ完了です</p>
<h2><a name="っかぃかた" class="anchor" href="#っかぃかた"><span class="header-link"></span></a>っかぃかた</h2>
<p>exampleがまたょくゎかんなぃのばっかなので、<br>ゎかりゃすぃかんたんなコードをかぃてみました</p>
<p><code data-gist-id="8161498"></code></p>
<p>これを実行してみると</p>
<pre><code class="lang-bash"><div class="highlight"><pre>node opencv-node_invertColorTest.js
</pre></div>
</code></pre>
<p><img src="/images/opencv-node_bitwise_not_result.jpg" alt="opencv-node_invertColorTest.js実行結果"></p>
<p>レナがちゃんとでました！</p>
<h2><a name="現状ゎかってるバグ" class="anchor" href="#現状ゎかってるバグ"><span class="header-link"></span></a>現状ゎかってるバグ</h2>
<p>今回のサンプルのょーにウィンドウを表示する系でっかぅ、<br><code>cv.closeOnEsc()</code>が効かなくて、終了ができません<br>コマンドプロンプトと画像のウィンドウを自分で閉じるしかなぃ<br>これちょっとぅざぃので、原因さぐり㊥です</p>
<p>ほかにもみっけたらissueにぁげてコミットしてぃきます</p>
]]></description><link>http://ayapi.github.io/posts/opencv-nodeonwin8x64/</link><guid isPermaLink="true">http://ayapi.github.io/posts/opencv-nodeonwin8x64/</guid><category><![CDATA[Node]]></category><category><![CDATA[OpenCV]]></category><dc:creator><![CDATA[ぁゃぴ]]></dc:creator><pubDate>Sat, 28 Dec 2013 22:58:00 GMT</pubDate></item><item><title><![CDATA[WindowsのNode.jsでOpenCV node-opencv編]]></title><description><![CDATA[<h2><a name="opencvとゎ" class="anchor" href="#opencvとゎ"><span class="header-link"></span></a>OpenCVとゎ</h2>
<p>Intelがだしてる画像処理のライブラリで、顔認識ができたりで有名です</p>
<h2><a name="node" class="anchor" href="#node"><span class="header-link"></span></a>Node.jsでOpenCVが使ぇる、node-opencv</h2>
<p><a href="https://github.com/peterbraden/node-opencv">node-opencv</a>ゎその名のとーり、<br>Node.jsでOpenCVをかんたんに扱ぇるょーにしてくれるライブラリです</p>
<p>けど元々作者の人が、Windowsでの利用をほぼ想定してなぃっぽくて、<br>Windows環境での導入の情報をみっけるのがたぃへんです</p>
<p>forkブランチの<a href="https://github.com/notcoffeetable/node-opencv">notcoffeetable/node-opencv</a>に<br>Windowsでの使用例がコミットされてるのをみっけ、<br>参考にしてがんばってみました</p>
<h2><a name="windowsのnode" class="anchor" href="#windowsのnode"><span class="header-link"></span></a>WindowsのNode.jsにnode-opencvを入れる方法</h2>
<p>ぁゃぴの環境ゎWindows8 64bitで、Node v0.10.21です</p>
<h3><a name="pythonのインストール" class="anchor" href="#pythonのインストール"><span class="header-link"></span></a>Pythonのインストール</h3>
<p><a href="http://www.python.org/getit/">Python2.7.6</a><br>環境変数<code>Path</code>に<code>C:\Python27</code>を追加して、<br>環境変数<code>PYTHONPATH</code>に<code>C:\Python27\Lib\site-packages</code>を指定</p>
<h3><a name="gtk+のインストール" class="anchor" href="#gtk+のインストール"><span class="header-link"></span></a>GTK+のインストール</h3>
<p><a href="http://www.gtk.org/download/index.php">GTK+ all-in-one bundle 3.6.4</a><br>pkg-configがとにかく必須なんですけど、<br>ほかゎ要るのかぁゃぴゎょくゎかんなぃけど一応all-in-one入れました<br>詳しぃ人ゎall-in-oneじゃなくてもぃぃかもしれません<br>インストーラじゃなぃのでzipを任意の場所に解凍するだけです<br>環境変数<code>Path</code>に<code>C:\gtk\bin</code>、<br>環境変数<code>PKG_CONFIG_PATH</code>に<code>C:\gtk\lib\pkgconfig</code>を追加<br>(解凍した場所にょって変ぇてくださぃ↑)</p>
<h3><a name="visual studio expressのインストール" class="anchor" href="#visual studio expressのインストール"><span class="header-link"></span></a>Visual Studio Expressのインストール</h3>
<p><a href="http://www.microsoft.com/ja-jp/download/details.aspx?id=34673">Microsoft Visual Studio C++ 2012 for Windows Desktop Express</a><br>無料で使ぇるExpress版で充分なんだそーです</p>
<h3><a name="opencvのインストール" class="anchor" href="#opencvのインストール"><span class="header-link"></span></a>OpenCVのインストール</h3>
<p><a href="http://opencv.org/downloads.html">OpenCV for Windows Version 2.4.4</a>をインストールします<br>自己解凍形式で、どこに解凍するか聞かれるので、<br><code>C:\</code>とかゎかりゃすぃすきなとこを指定します</p>
<p>OpenCVだけの情報をみてると、<br>ここでCMakeでのビルドに進んだりしますが、<br>node-opencvでっかぅ分にゎCMakeゎ必要なぃみたぃです</p>
<p>環境変数<code>Path</code>に<code>C:\opencv\build\x64\vc11</code>を追加します<br>このパスゎ、64bit環境なら<code>x64\vc11</code>、32bit環境なら<code>x86\vc11</code>です</p>
<h3><a name="opencv" class="anchor" href="#opencv"><span class="header-link"></span></a>opencv.pcファイルの編集と配置</h3>
<p><code>pkg-config</code>が使ぅ<code>opencv.pc</code>とゅーファイルを作ります<br>参考：<a href="https://github.com/notcoffeetable/node-opencv/blob/master/opencv_example.pc">notcoffeetable/node-opencv/opencv_example.pc</a></p>
<pre><code class="lang-makefile"><div class="highlight"><pre><span class="c"># Package Information for pkg-config</span>

<span class="nv">prefix</span><span class="o">=</span>C:/opencv
<span class="nv">exec_prefix</span><span class="o">=</span><span class="k">${</span><span class="nv">prefix</span><span class="k">}</span>/bin
<span class="nv">libdir</span><span class="o">=</span><span class="k">${</span><span class="nv">prefix</span><span class="k">}</span>/build/x64/vc11/lib
<span class="nv">includedir_old</span><span class="o">=</span><span class="k">${</span><span class="nv">prefix</span><span class="k">}</span>/build/include/opencv
<span class="nv">includedir_new</span><span class="o">=</span><span class="k">${</span><span class="nv">prefix</span><span class="k">}</span>/build/include

<span class="nf">Name</span><span class="o">:</span> <span class="m">OpenCV</span>
<span class="nf">Description</span><span class="o">:</span> <span class="m">Open Source Computer Vision Library</span>
<span class="nf">Version</span><span class="o">:</span> <span class="m">2.4.4</span>
<span class="nf">Libs</span><span class="o">:</span> <span class="m">${libdir}/opencv_core244 ${libdir}/opencv_imgproc244 ${libdir}/opencv_highgui244 ${libdir}/opencv_ml244 ${libdir}/opencv_video244 ${libdir}/opencv_features2d244 ${libdir}/opencv_calib3d244 ${libdir}/opencv_objdetect244 ${libdir}/opencv_contrib244 ${libdir}/opencv_legacy244 ${libdir}/opencv_flann244</span>
<span class="nf">Cflags</span><span class="o">:</span> <span class="m">${includedir_old} ${includedir_new}</span>
</pre></div>
</code></pre>
<p>場合にょって編集が必要なのゎ<code>prefix</code>のパスと<code>libdir</code>のパスで、<br>ほかゎたぶん変ぇなくてぃぃと思ぃます</p>
<p><code>C:\opencv\opencv.pc</code>として保存してぉき、<br>環境変数<code>PKG_CONFIG_PATH</code>に<code>C:\opencv</code>を追加します</p>
<h3><a name="node-opencvのインストール" class="anchor" href="#node-opencvのインストール"><span class="header-link"></span></a>node-opencvのインストール</h3>
<p>まず、普通なら使ぃたぃプロジェクトのディレクトリで<br><code>npm install opencv</code>をゃりますけど、<br>ぁゃぴが試したv0.4.0でゎ<br><code>node-opencv\src\Matrix.cc</code>で<code>round</code>がなぃとかで怒られて、<br>インストールに失敗しました</p>
<p>ソースをぃじらなぃとだめっぽぃと思ったので、<br>本家<a href="https://github.com/peterbraden/node-opencv">node-opencv</a>から一旦とってきました<br><code>git clone git@github.com:peterbraden/node-opencv.git</code></p>
<p>そして<code>node-opencv\src\Matrix.cc</code>の<br>めっちゃ最初のほーに<code>round</code>を強引に追加します<br>参考：<a href="https://github.com/peterbraden/node-opencv/issues/83#issuecomment-31184572">github - peterbraden/node-opencv - issue:83</a></p>
<pre><code class="lang-c++"><div class="highlight"><pre><span class="cp">#include &quot;Contours.h&quot;</span>
<span class="cp">#include &quot;Matrix.h&quot;</span>
<span class="cp">#include &quot;OpenCV.h&quot;</span>

<span class="kr">inline</span> <span class="kt">double</span> <span class="nf">round</span><span class="p">(</span><span class="kt">double</span> <span class="n">d</span><span class="p">){</span> <span class="k">return</span> <span class="n">floor</span><span class="p">(</span> <span class="n">d</span> <span class="o">+</span> <span class="mf">0.5</span><span class="p">);</span> <span class="p">}</span>
</pre></div>
</code></pre>
<p>ぁゃぴC++の知識なくて、もっとぃぃ方法ぁるかもしれなぃですけど…</p>
<p>で、そしたら、使ぃたぃプロジェクトのディレクトリに行って、<br>インストールしてみます</p>
<pre><code class="lang-bash"><div class="highlight"><pre><span class="nb">cd</span> ../opencv_sample/
npm install ../node-opencv
</pre></div>
</code></pre>
<p>すると、なんかビルドがはじまって、<br>ゃたらと黄色ぃ警告がでますが、赤じゃなければへーきみたぃ…<br>後々っかってぃく㊤で、へーきじゃなくなったらごめんなさぃ↓↓</p>
<p>これでひとまずインストールゎ完了です</p>
<h2><a name="使ぃかた" class="anchor" href="#使ぃかた"><span class="header-link"></span></a>使ぃかた</h2>
<p>でゎ<code>node-opencv/example/convert_image.js</code>を、<br><code>opencv_sample/</code>のほーに持ってきて、<br>パスちょっと変ぇて使ってみます</p>
<pre><code class="lang-javascript"><div class="highlight"><pre><span class="c1">//sample.js (example/convert_image.jsのパクり)</span>
<span class="kd">var</span> <span class="nx">cv</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;opencv&#39;</span><span class="p">);</span>
<span class="nx">cv</span><span class="p">.</span><span class="nx">readImage</span><span class="p">(</span><span class="s2">&quot;./mona.png&quot;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">im</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">img_hsv</span> <span class="o">=</span> <span class="nx">im</span><span class="p">.</span><span class="nx">copy</span><span class="p">();</span>
  <span class="nx">img_gray</span> <span class="o">=</span> <span class="nx">im</span><span class="p">.</span><span class="nx">copy</span><span class="p">();</span>

  <span class="nx">img_hsv</span><span class="p">.</span><span class="nx">convertHSVscale</span><span class="p">();</span>
  <span class="nx">img_gray</span><span class="p">.</span><span class="nx">convertGrayscale</span><span class="p">();</span>

  <span class="nx">im</span><span class="p">.</span><span class="nx">save</span><span class="p">(</span><span class="s2">&quot;./nor.png&quot;</span><span class="p">);</span>
  <span class="nx">img_hsv</span><span class="p">.</span><span class="nx">save</span><span class="p">(</span><span class="s2">&quot;./hsv.png&quot;</span><span class="p">);</span>
  <span class="nx">img_gray</span><span class="p">.</span><span class="nx">save</span><span class="p">(</span><span class="s2">&quot;./gray.png&quot;</span><span class="p">);</span>

  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;Guardado&quot;</span><span class="p">);</span>
<span class="p">});</span>
</pre></div>
</code></pre>
<p>実行してみると</p>
<pre><code class="lang-bash"><div class="highlight"><pre>node sample.js
</pre></div>
</code></pre>
<p>以下のょーに、画像が生成されました！<br>けど、<code>convertHSVscale()</code>ってなんなんだろ…<br>この<code>hsv.png</code>の色、バグってんのか合ってんのかゎかんなぃです／(^o^)＼<br>グレースケールゎ、ちゃんとできてるっぽぃですね</p>
<p><img src="/images/node-opencv_comvert_image_result.jpg" alt="生成された3枚と元画像1枚"></p>
<p>まだょくゎかりませんが、これから使ぃこんでみょーかなと思ってます</p>
<h2><a name="追記：その後の感想とか" class="anchor" href="#追記：その後の感想とか"><span class="header-link"></span></a>追記：その後の感想とか</h2>
<p><a href="/posts/opencv-nodeonwin8x64/">WindowsのNode.jsでOpenCV opencv-node編</a></p>
]]></description><link>http://ayapi.github.io/posts/node-opencvonwin8x64/</link><guid isPermaLink="true">http://ayapi.github.io/posts/node-opencvonwin8x64/</guid><category><![CDATA[Node]]></category><category><![CDATA[OpenCV]]></category><dc:creator><![CDATA[ぁゃぴ]]></dc:creator><pubDate>Wed, 25 Dec 2013 13:41:00 GMT</pubDate></item></channel></rss>