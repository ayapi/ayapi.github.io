<?xml version="1.0" encoding="UTF-8"?>
<rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[ayapi.github.io]]></title><description><![CDATA[ぁゃぴがプログラミングのことをかくブログ]]></description><link>http://ayapi.github.io</link><generator>RSS for Node</generator><lastBuildDate>Wed, 25 Dec 2013 23:44:48 GMT</lastBuildDate><atom:link href="http://ayapi.github.io/feed.xml" rel="self" type="application/rss+xml"/><author><![CDATA[ぁゃぴ]]></author><pubDate>Wed, 25 Dec 2013 23:44:48 GMT</pubDate><copyright><![CDATA[2013 ぁゃぴ]]></copyright><language><![CDATA[en]]></language><managingEditor><![CDATA[ぁゃぴ]]></managingEditor><webMaster><![CDATA[ぁゃぴ]]></webMaster><ttl>60</ttl><item><title><![CDATA[WindowsのNode.jsでOpenCVを使ぅ]]></title><description><![CDATA[<h2><a name="opencvとゎ" class="anchor" href="#opencvとゎ"><span class="header-link"></span></a>OpenCVとゎ</h2>
<p>Intelがだしてる画像処理のライブラリで、顔認識ができたりで有名です</p>
<h2><a name="node" class="anchor" href="#node"><span class="header-link"></span></a>Node.jsでOpenCVが使ぇる、node-opencv</h2>
<p><a href="https://github.com/peterbraden/node-opencv">node-opencv</a>ゎその名のとーり、<br>Node.jsでOpenCVをかんたんに扱ぇるょーにしてくれるライブラリです</p>
<p>けど元々作者の人が、Windowsでの利用をほぼ想定してなぃっぽくて、<br>Windows環境での導入の情報をみっけるのがたぃへんです</p>
<p>forkブランチの<a href="https://github.com/notcoffeetable/node-opencv">notcoffeetable/node-opencv</a>に<br>Windowsでの使用例がコミットされてるのをみっけ、<br>参考にしてがんばってみました</p>
<h2><a name="windowsのnode" class="anchor" href="#windowsのnode"><span class="header-link"></span></a>WindowsのNode.jsにnode-opencvを入れる方法</h2>
<p>ぁゃぴの環境ゎWindows8 64bitで、Node v0.10.21です</p>
<h3><a name="pythonのインストール" class="anchor" href="#pythonのインストール"><span class="header-link"></span></a>Pythonのインストール</h3>
<p><a href="http://www.python.org/getit/">Python2.7.6</a><br>環境変数<code>Path</code>に<code>C:\Python27</code>を追加して、<br>環境変数<code>PYTHONPATH</code>に<code>C:\Python27\Lib\site-packages</code>を指定</p>
<h3><a name="gtk+のインストール" class="anchor" href="#gtk+のインストール"><span class="header-link"></span></a>GTK+のインストール</h3>
<p><a href="http://www.gtk.org/download/index.php">GTK+ all-in-one bundle 3.6.4</a><br>pkg-configがとにかく必須なんですけど、<br>ほかゎ要るのかぁゃぴゎょくゎかんなぃけど一応all-in-one入れました<br>詳しぃ人ゎall-in-oneじゃなくてもぃぃかもしれません<br>インストーラじゃなぃのでzipを任意の場所に解凍するだけです<br>環境変数<code>Path</code>に<code>C:\gtk\bin</code>、<br>環境変数<code>PKG_CONFIG_PATH</code>に<code>C:\gtk\lib\pkgconfig</code>を追加<br>(解凍した場所にょって変ぇてくださぃ↑)</p>
<h3><a name="visual studio expressのインストール" class="anchor" href="#visual studio expressのインストール"><span class="header-link"></span></a>Visual Studio Expressのインストール</h3>
<p><a href="http://www.microsoft.com/ja-jp/download/details.aspx?id=34673">Microsoft Visual Studio C++ 2012 for Windows Desktop Express</a><br>無料で使ぇるExpress版で充分なんだそーです</p>
<h3><a name="opencvのインストール" class="anchor" href="#opencvのインストール"><span class="header-link"></span></a>OpenCVのインストール</h3>
<p><a href="http://opencv.org/downloads.html">OpenCV for Windows Version 2.4.4</a>をインストールします<br>自己解凍形式で、どこに解凍するか聞かれるので、<br><code>C:\</code>とかゎかりゃすぃすきなとこを指定します</p>
<p>OpenCVだけの情報をみてると、<br>ここでCMakeでのビルドに進んだりしますが、<br>node-opencvでっかぅ分にゎCMakeゎ必要なぃみたぃです</p>
<p>環境変数<code>Path</code>に<code>C:\opencv\build\x64\vc11</code>を追加します<br>このパスゎ、64bit環境なら<code>x64\vc11</code>、32bit環境なら<code>x86\vc11</code>です</p>
<h3><a name="opencv" class="anchor" href="#opencv"><span class="header-link"></span></a>opencv.pcファイルの編集と配置</h3>
<p><code>pkg-config</code>が使ぅ<code>opencv.pc</code>とゅーファイルを作ります<br>参考：<a href="https://github.com/notcoffeetable/node-opencv/blob/master/opencv_example.pc">notcoffeetable/node-opencv/opencv_example.pc</a></p>
<pre><code class="lang-makefile"><div class="highlight"><pre><span class="c"># Package Information for pkg-config</span>

<span class="nv">prefix</span><span class="o">=</span>C:/opencv
<span class="nv">exec_prefix</span><span class="o">=</span><span class="k">${</span><span class="nv">prefix</span><span class="k">}</span>/bin
<span class="nv">libdir</span><span class="o">=</span><span class="k">${</span><span class="nv">prefix</span><span class="k">}</span>/build/x64/vc11/lib
<span class="nv">includedir_old</span><span class="o">=</span><span class="k">${</span><span class="nv">prefix</span><span class="k">}</span>/build/include/opencv
<span class="nv">includedir_new</span><span class="o">=</span><span class="k">${</span><span class="nv">prefix</span><span class="k">}</span>/build/include

<span class="nf">Name</span><span class="o">:</span> <span class="m">OpenCV</span>
<span class="nf">Description</span><span class="o">:</span> <span class="m">Open Source Computer Vision Library</span>
<span class="nf">Version</span><span class="o">:</span> <span class="m">2.4.4</span>
<span class="nf">Libs</span><span class="o">:</span> <span class="m">${libdir}/opencv_core244 ${libdir}/opencv_imgproc244 ${libdir}/opencv_highgui244 ${libdir}/opencv_ml244 ${libdir}/opencv_video244 ${libdir}/opencv_features2d244 ${libdir}/opencv_calib3d244 ${libdir}/opencv_objdetect244 ${libdir}/opencv_contrib244 ${libdir}/opencv_legacy244 ${libdir}/opencv_flann244</span>
<span class="nf">Cflags</span><span class="o">:</span> <span class="m">${includedir_old} ${includedir_new}</span>
</pre></div>
</code></pre>
<p>場合にょって編集が必要なのゎ<code>prefix</code>のパスと<code>libdir</code>のパスで、<br>ほかゎたぶん変ぇなくてぃぃと思ぃます</p>
<p><code>C:\opencv\opencv.pc</code>として保存してぉき、<br>環境変数<code>PKG_CONFIG_PATH</code>に<code>C:\opencv</code>を追加します</p>
<h3><a name="node-opencvのインストール" class="anchor" href="#node-opencvのインストール"><span class="header-link"></span></a>node-opencvのインストール</h3>
<p>まず、普通なら使ぃたぃプロジェクトのディレクトリで<br><code>npm install opencv</code>をゃりますけど、<br>ぁゃぴが試したv0.4.0でゎ<br><code>node-opencv\src\Matrix.cc</code>で<code>round</code>がなぃとかで怒られて、<br>インストールに失敗しました</p>
<p>ソースをぃじらなぃとだめっぽぃと思ったので、<br>本家<a href="https://github.com/peterbraden/node-opencv">node-opencv</a>から一旦とってきました<br><code>git clone git@github.com:peterbraden/node-opencv.git</code></p>
<p>そして<code>node-opencv\src\Matrix.cc</code>の<br>めっちゃ最初のほーに<code>round</code>を強引に追加します<br>参考：<a href="https://github.com/peterbraden/node-opencv/issues/83#issuecomment-31184572">github - peterbraden/node-opencv - issue:83</a></p>
<pre><code class="lang-c++"><div class="highlight"><pre><span class="cp">#include &quot;Contours.h&quot;</span>
<span class="cp">#include &quot;Matrix.h&quot;</span>
<span class="cp">#include &quot;OpenCV.h&quot;</span>

<span class="kr">inline</span> <span class="kt">double</span> <span class="nf">round</span><span class="p">(</span><span class="kt">double</span> <span class="n">d</span><span class="p">){</span> <span class="k">return</span> <span class="n">floor</span><span class="p">(</span> <span class="n">d</span> <span class="o">+</span> <span class="mf">0.5</span><span class="p">);</span> <span class="p">}</span>
</pre></div>
</code></pre>
<p>ぁゃぴC++の知識なくて、もっとぃぃ方法ぁるかもしれなぃですけど…</p>
<p>で、そしたら、使ぃたぃプロジェクトのディレクトリに行って、<br>インストールしてみます</p>
<pre><code class="lang-bash"><div class="highlight"><pre><span class="nb">cd</span> ../opencv_sample/
npm install ../node-opencv
</pre></div>
</code></pre>
<p>すると、なんかビルドがはじまって、<br>ゃたらと黄色ぃ警告がでますが、赤じゃなければへーきみたぃ…<br>後々っかってぃく㊤で、へーきじゃなくなったらごめんなさぃ↓↓</p>
<p>これでひとまずインストールゎ完了です</p>
<h2><a name="使ぃかた" class="anchor" href="#使ぃかた"><span class="header-link"></span></a>使ぃかた</h2>
<p>でゎ<code>node-opencv/example/convert_image.js</code>を、<br><code>opencv_sample/</code>のほーに持ってきて、<br>パスちょっと変ぇて使ってみます</p>
<pre><code class="lang-javascript"><div class="highlight"><pre><span class="c1">//sample.js (example/convert_image.jsのパクり)</span>
<span class="kd">var</span> <span class="nx">cv</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;opencv&#39;</span><span class="p">);</span>
<span class="nx">cv</span><span class="p">.</span><span class="nx">readImage</span><span class="p">(</span><span class="s2">&quot;./mona.png&quot;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">im</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">img_hsv</span> <span class="o">=</span> <span class="nx">im</span><span class="p">.</span><span class="nx">copy</span><span class="p">();</span>
  <span class="nx">img_gray</span> <span class="o">=</span> <span class="nx">im</span><span class="p">.</span><span class="nx">copy</span><span class="p">();</span>

  <span class="nx">img_hsv</span><span class="p">.</span><span class="nx">convertHSVscale</span><span class="p">();</span>
  <span class="nx">img_gray</span><span class="p">.</span><span class="nx">convertGrayscale</span><span class="p">();</span>

  <span class="nx">im</span><span class="p">.</span><span class="nx">save</span><span class="p">(</span><span class="s2">&quot;./nor.png&quot;</span><span class="p">);</span>
  <span class="nx">img_hsv</span><span class="p">.</span><span class="nx">save</span><span class="p">(</span><span class="s2">&quot;./hsv.png&quot;</span><span class="p">);</span>
  <span class="nx">img_gray</span><span class="p">.</span><span class="nx">save</span><span class="p">(</span><span class="s2">&quot;./gray.png&quot;</span><span class="p">);</span>

  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;Guardado&quot;</span><span class="p">);</span>
<span class="p">});</span>
</pre></div>
</code></pre>
<p>実行してみると</p>
<pre><code class="lang-bash"><div class="highlight"><pre>node sample.js
</pre></div>
</code></pre>
<p>以下のょーに、画像が生成されました！<br>けど、<code>convertHSVscale()</code>ってなんなんだろ…<br>この<code>hsv.png</code>の色、バグってんのか合ってんのかゎかんなぃです／(^o^)＼<br>グレースケールゎ、ちゃんとできてるっぽぃですね</p>
<p><img src="/images/node-opencv_comvert_image_result.jpg" alt="生成された3枚と元画像1枚"></p>
<p>まだょくゎかりませんが、これから使ぃこんでみょーかなと思ってます</p>
]]></description><link>http://ayapi.github.io/posts/node-opencvonwin8x64/</link><guid isPermaLink="true">http://ayapi.github.io/posts/node-opencvonwin8x64/</guid><category><![CDATA[Node]]></category><category><![CDATA[OpenCV]]></category><dc:creator><![CDATA[ぁゃぴ]]></dc:creator><pubDate>Wed, 25 Dec 2013 13:41:00 GMT</pubDate></item><item><title><![CDATA[dc.jsをっかった散布図と折れ線グラフの複合チャート]]></title><description><![CDATA[<h2><a name="d3" class="anchor" href="#d3"><span class="header-link"></span></a>D3.jsにっぃて</h2>
<p><a href="http://d3js.org/">D3.js</a>ゎ、データ駆動でのDOM操作機構を提供するjsのライブラリで、<br>データヴィジュアライゼーションとかでとても注目されてるゃっです<br>日本語の情報もぁり、注目度の高さがぅかがぇます<br><a href="http://ja.d3js.node.ws/">D3.js - 日本語ドキュメント</a><br><a href="http://ja.d3js.info/alignedleft/tutorials/d3/">スコット・マレイ D3 チュートリアル</a></p>
<h2><a name="d3" class="anchor" href="#d3"><span class="header-link"></span></a>D3.jsベースのチャート作成ライブラリ</h2>
<p>D3.jsゎとても自由度が高くて、<br>その柔軟性とか表現力とかが強みでもぁるんですけど、<br>たとぇばょくぁるバーチャート(棒グラフ)とか<br>パイチャート(円グラフ)とかを表示させたぃだけなのに、<br>D3.jsで１からゎざ②それをかくのゎ、どーなのってなります</p>
<p>なので、フツーのチャートをかんたんにっくることを目的とした、<br>D3.jsベースのチャーティングライブラリが<br><a href="http://nvd3.org/">NVD3.js</a>、<a href="http://dimplejs.org/">dimple.js</a>、<a href="http://nickqizhu.github.io/dc.js/">dc.js</a>、<a href="http://code.shutterstock.com/rickshaw/">Rickshaw</a>、<a href="http://tenxer.github.io/xcharts/">xCharts</a>、とかで、<br>ほかにもぃっぱぃぁります</p>
<h2><a name="複合チャートへの対応" class="anchor" href="#複合チャートへの対応"><span class="header-link"></span></a>複合チャートへの対応</h2>
<p>けど複合チャートまでできるかってゅーと結構限られてくるみたぃで、<br>特にスキャッターチャート(散布図)となにかの複合、とかゎ、<br>なか②考慮されることが少なぃみたぃです</p>
<p>ぁゃぴがみっけれなかったぃぃ方法がぁるかもしれなぃんですけど、<br>NVD3.jsとdimple.jsの現時点での最新版の複合チャート対応にっぃて、<br>ぁゃぴがためした限りで、むずかしぃと思ぅ部分をかきます</p>
<h3><a name="nvd3" class="anchor" href="#nvd3"><span class="header-link"></span></a>NVD3.js</h3>
<p>NVD3.jsゎ、複合チャートもひとっのmodelとして提供されてて、<br>っくりたぃ複合チャートの組み合ゎせが<br>NVD3.jsのmodelに既に提供されてる場合ゎそれをっかぇます<br>棒＆折れ線複合の<code>linePlusBarChart</code>モデルとかがそれです</p>
<p>逆に、たとぇば<code>scatterChart</code>モデルと<code>lineChart</code>モデルが<br>それぞれ単体で提供されてるからと言って、<br>それを勝手に組み合ゎせてっかぅのゎできなさげエアーでした</p>
<p>スキャッター複合だと複合モデルが提供されてなぃので、<br>折れ線のみためをハックしてスキャッターのょぅにみせる、<br>とか、だぃぶ裏技みたぃなことをゃる必要がぁります<br><a href="https://github.com/novus/nvd3/issues/321">issue #321 How to draw a line chart and a scatter chart together?</a></p>
<h3><a name="dimple" class="anchor" href="#dimple"><span class="header-link"></span></a>dimple.js</h3>
<p>dimple.jsゎ、ひとっのチャートに対して<br>ひとっのデータセットしか与ぇれなぃっぽぃです<br>たとぇば、<br>折れ線用のデータセットのレコードのx軸が1刻みで、<br>スキャッター用のデータセットのそれが0.2刻みだったとすると、<br>以下のょーにマージしたデータセットをdimpleに渡すことになります<br>これゎなんだかちょっと不自然なかんじがします</p>
<pre><code class="lang-javascript"><div class="highlight"><pre><span class="p">[</span> <span class="c1">//むりにマージしたデータセット</span>
  <span class="p">{</span><span class="nx">x</span><span class="o">:</span><span class="mf">1.0</span><span class="p">,</span> <span class="nx">line</span><span class="o">:</span><span class="mi">1</span><span class="p">,</span> <span class="nx">scatter</span><span class="o">:</span><span class="mi">1</span><span class="p">},</span>
  <span class="p">{</span><span class="nx">x</span><span class="o">:</span><span class="mf">1.2</span><span class="p">,</span> <span class="nx">line</span><span class="o">:</span><span class="mi">0</span><span class="p">,</span> <span class="nx">scatter</span><span class="o">:</span><span class="mi">4</span><span class="p">},</span>
  <span class="p">{</span><span class="nx">x</span><span class="o">:</span><span class="mf">1.4</span><span class="p">,</span> <span class="nx">line</span><span class="o">:</span><span class="mi">0</span><span class="p">,</span> <span class="nx">scatter</span><span class="o">:</span><span class="mi">5</span><span class="p">},</span>
  <span class="p">{</span><span class="nx">x</span><span class="o">:</span><span class="mf">1.6</span><span class="p">,</span> <span class="nx">line</span><span class="o">:</span><span class="mi">0</span><span class="p">,</span> <span class="nx">scatter</span><span class="o">:</span><span class="mi">8</span><span class="p">},</span>
  <span class="p">{</span><span class="nx">x</span><span class="o">:</span><span class="mf">1.8</span><span class="p">,</span> <span class="nx">line</span><span class="o">:</span><span class="mi">0</span><span class="p">,</span> <span class="nx">scatter</span><span class="o">:</span><span class="mi">15</span><span class="p">},</span>
  <span class="p">{</span><span class="nx">x</span><span class="o">:</span><span class="mf">2.0</span><span class="p">,</span> <span class="nx">line</span><span class="o">:</span><span class="mi">3</span><span class="p">,</span> <span class="nx">scatter</span><span class="o">:</span><span class="mi">10</span><span class="p">},</span>
  <span class="p">{</span><span class="nx">x</span><span class="o">:</span><span class="mf">2.2</span><span class="p">,</span> <span class="nx">line</span><span class="o">:</span><span class="mi">0</span><span class="p">,</span> <span class="nx">scatter</span><span class="o">:</span><span class="mi">2</span><span class="p">}</span>
<span class="p">]</span>
</pre></div>
</code></pre>
<h2><a name="dc" class="anchor" href="#dc"><span class="header-link"></span></a>dc.jsで散布図と折れ線の複合チャート</h2>
<p>dc.jsでゎ、スキャッターとラインの<br>異なるデータセットをっかった複合チャートも<br>違和感なぃ自然な記述で表示することができます</p>
<h3><a name="javascriptの記述" class="anchor" href="#javascriptの記述"><span class="header-link"></span></a>JavaScriptの記述</h3>
<p>以下ゎ、<br>・折れ線…㊨y軸をっかぅ<br>・散布図…絶対値でプロットして元の値の正負で色を変ぇる<br>ってゅーのをゃってみたコードです<br>dc.jsの公式exampleの<a href="https://github.com/NickQiZhu/dc.js/blob/5d676cae184736a1395b9177d570b683ba982114/web/examples/multi-scatter.html">multi-scatter</a>と<a href="https://github.com/NickQiZhu/dc.js/blob/f9b0bdaabcd4fe09449efac9dbb577ee93800173/web/examples/right-axis.html">right-axis</a>を参考にしました</p>
<p><code data-gist-id="7698087" data-gist-line="27-65" data-gist-file="dcjs_scatterAndLineRightAxis.html"><a href="https://gist.github.com/ayapi/7698087#file-dcjs_scatterandlinerightaxis-html">https://gist.github.com/ayapi/7698087#file-dcjs_scatterandlinerightaxis-html</a> Line:27-65</code></p>
<p>↑<code>chart.compose()</code>のぁたりとかゎ、だぃぶゎかりゃすぃと思ぃます</p>
<p>dc.jsでゎ、<a href="http://square.github.io/crossfilter/">Crossfilter</a>とゅーライブラリがっかゎれてて、<br>これゎデータセットをグルーピング、フィルタリングをするもので、<br>以下のょーにでてきた<code>dimension</code>とか<code>group</code>とかゅー概念ゎ、<br>Crossfilterでっかゎれるものです</p>
<p><code data-gist-id="7698087" data-gist-line="30-36" data-gist-file="dcjs_scatterAndLineRightAxis.html"><a href="https://gist.github.com/ayapi/7698087#file-dcjs_scatterandlinerightaxis-html">https://gist.github.com/ayapi/7698087#file-dcjs_scatterandlinerightaxis-html</a> Line:30-36</code></p>
<p>このへんゎCrossfilterの知識がなぃとゎかりづらぃと思ぃます<br>今回ゎ特別なグルーピングが必要なくこぅなりましたが、<br>たとぇば、折れ線のデータセットのx軸が1刻みだけど<br>グラフでゎx軸の刻みを10ずっにして合計で表現したぃとか、<br>そーゅーところでCrossfilterゎ威力を発揮するもので、<br>ちゃんとっかぃこなせればかなりょさそぅだと思ぃます</p>
<p>ぁと<code>+d.x</code>とか<code>+d.y</code>とか、プラス記号をっけてるのゎ、<br>元々のexampleにぁったんですけど、js特有の、暗黙の型変換です<br><code>d3.tsv()</code>ゃ<code>d3.csv()</code>でデータファイルをパースすると、<br>数がぜんぶstringになってるから、numberに変換してるだけです<br>こーゅーとこゎjsの、ぃぃんだかゎるぃんだか…って思ぅとこです</p>
<h3><a name="svgのためのcss" class="anchor" href="#svgのためのcss"><span class="header-link"></span></a>SVGのためのCSS</h3>
<p>dc.jsゎSVGで描画しますが、<br>SVGのみためを整ぇるためのCSSとゅーのゎ<br>HTMLとゎちょっとちがぅところがぁります<br>詳しくゎ仕様書をみればゎかります<br><a href="http://www.hcn.zaq.ne.jp/___/SVG11-2nd/styling.html">Scalable Vector Graphics (SVG) 1.1 （第２版）- 6 スタイル付け</a></p>
<p>色を変ぇたぃってなると、<br><code>fill</code>とか<code>stroke</code>とかってゅープロパティでかくことになります</p>
<p><code data-gist-id="7698087" data-gist-line="11-16" data-gist-file="dcjs_scatterAndLineRightAxis.html"><a href="https://gist.github.com/ayapi/7698087#file-dcjs_scatterandlinerightaxis-html">https://gist.github.com/ayapi/7698087#file-dcjs_scatterandlinerightaxis-html</a> Line:11-16</code></p>
<h3><a name="完成ばん" class="anchor" href="#完成ばん"><span class="header-link"></span></a>完成ばん</h3>
<p>てゎけで、実際動かしてみたら、こんなかんじになりました！</p>
<p><img src="/images/dcjs_scatter_and_line.png" alt="dc.jsをっかった散布図と折れ線グラフの複合チャート"></p>
]]></description><link>http://ayapi.github.io/posts/scatterandlinechartwithdcjs/</link><guid isPermaLink="true">http://ayapi.github.io/posts/scatterandlinechartwithdcjs/</guid><category><![CDATA[JavaScript]]></category><category><![CDATA[SVG]]></category><dc:creator><![CDATA[ぁゃぴ]]></dc:creator><pubDate>Fri, 29 Nov 2013 09:44:00 GMT</pubDate></item><item><title><![CDATA[ApacheCommonsMath3での標準偏差の算出]]></title><description><![CDATA[<p>Javaでゎ<a href="http://commons.apache.org/proper/commons-math/">ApacheCommonsMath</a>の<a href="http://commons.apache.org/proper/commons-math/userguide/stat.html">Stat</a>をっかぅと、<br>とてもかんたんに統計の計算ができます</p>
<p>標準偏差を求めるのゎ、たったこれだけでできます</p>
<p><code data-gist-id="7681028" data-gist-line="8-15" data-gist-file="Calculator.java"><a href="https://gist.github.com/ayapi/7681028#file-calculator-java">https://gist.github.com/ayapi/7681028#file-calculator-java</a> Line:8-15</code></p>
<p>けど、標準偏差を求める時に気をっけなきゃぃけなぃのが、その種類です<br>ひとことで標準偏差って言っても、<br>なんの標準偏差なのかってことがちがぅ時がぁります</p>
<p>ApacheCommonsMathの<code>SummaryStatistics</code>クラスに用意されてる<br>標準偏差を求める<code>getStandardDeviation()</code>メソッドゎ、<br>不偏標準偏差が返ります<br>\(\bar{x}\)を平均値としたとき</p>
<p>\begin{equation}<br>u = \sqrt{\sum_{i=1}^n \frac{(x_i - \bar{x})^2}{n - 1}}<br>\end{equation}</p>
<p>↑こっちのほーです(相当がんばってLaTeXかぃた結果ｗｗｗ)<br>Excelでゅーと<code>STDEV()</code>にぁたります</p>
<p>で、そーじゃなくて、母標準偏差、<br>\(\mu\)を平均値として</p>
<p>\begin{equation}<br>\sigma = \sqrt{\sum_{i=1}^N \frac{(x_i - \mu)^2}{N}}<br>\end{equation}</p>
<p>↑こっちのほー(まだがんばるｗｗｗｗ)<br>Excelでゅー<code>STDEVP()</code>なんですけど、<br>これを算出するメソッドゎ<code>SummaryStatistics</code>クラスにゎなぃです</p>
<p>けど、母分散を求めるメソッドゎぁるので、<br>それの平方根を取ればできます</p>
<p><code data-gist-id="7681028" data-gist-line="16-24" data-gist-file="Calculator.java"><a href="https://gist.github.com/ayapi/7681028#file-calculator-java">https://gist.github.com/ayapi/7681028#file-calculator-java</a> Line:16-24</code></p>
<p>なんで「Excelでゅーと」とか言ってるかってゅーと<br>Spockのテストデータっくるときに<br>Excelでゃればラクなんだってこと、ぃまさら気づぃたからです<br>今まで一生懸命、電卓でゃってました　まじばかすぎます<br>さすがにこーゅー計算ゎ電卓でゃるのたぃへんです</p>
<p><code data-gist-id="7681028" data-gist-file="CalculatorSpec.groovy"><a href="https://gist.github.com/ayapi/7681028#file-calculatorspec-groovy">https://gist.github.com/ayapi/7681028#file-calculatorspec-groovy</a></code></p>
]]></description><link>http://ayapi.github.io/posts/stdevapachecommonsmath/</link><guid isPermaLink="true">http://ayapi.github.io/posts/stdevapachecommonsmath/</guid><category><![CDATA[Java]]></category><dc:creator><![CDATA[ぁゃぴ]]></dc:creator><pubDate>Wed, 27 Nov 2013 21:00:00 GMT</pubDate></item><item><title><![CDATA[JXDatePickerで選択可能な日付範囲を制限する]]></title><description><![CDATA[<h2><a name="jxdatepickerにっぃて" class="anchor" href="#jxdatepickerにっぃて"><span class="header-link"></span></a>JXDatePickerにっぃて</h2>
<p>JXDatePickerゎSwingのコンポーネントで、<br>カレンダーから日付を選ぶUIをかんたんに追加できます<br>同様のものゎ名前まで似てる<a href="http://www.jdatepicker.com/">JDatePicker</a>とかぁるんですけど、<br>派生とかじゃなくてぜん②ちがぅものみたぃです</p>
<p>ただ選択させて、日付を取得するだけの<br>ぃちばんシンプルな使ぃ方だと、こんなかんじです</p>
<pre><code class="lang-java"><div class="highlight"><pre><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Calendar</span> <span class="kd">extends</span> <span class="n">JPanel</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="n">JXDatePicker</span> <span class="n">datePicker</span><span class="o">;</span>
    <span class="kd">public</span> <span class="nf">Calendar</span><span class="o">(){</span>
        <span class="n">datePicker</span> <span class="o">=</span> <span class="k">new</span> <span class="n">JXDatePicker</span><span class="o">();</span>
        <span class="n">add</span><span class="o">(</span><span class="n">datePicker</span><span class="o">);</span>
    <span class="o">}</span>
    <span class="kd">public</span> <span class="n">Date</span> <span class="nf">getDate</span><span class="o">(){</span>
        <span class="k">return</span> <span class="n">datePicker</span><span class="o">.</span><span class="na">getDate</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
</pre></div>
</code></pre>
<h2><a name="選択可能な日付を制限する" class="anchor" href="#選択可能な日付を制限する"><span class="header-link"></span></a>選択可能な日付を制限する</h2>
<h3><a name="日付の計算と指定" class="anchor" href="#日付の計算と指定"><span class="header-link"></span></a>日付の計算と指定</h3>
<p>今回ゎ、明日以降の1週間だけを選択可能にしてみることにします</p>
<p>まず明日とか1週間後とかを計算しなきゃですが、<br><a href="http://commons.apache.org/proper/commons-lang/">Apache Commons Lang</a>の<code>DateUtils</code>クラスをっかぅと、<br>日付の計算もとてもかんたんにできます</p>
<p><code data-gist-id="7592669" data-gist-line="2" data-gist-hide-footer="true" data-gist-hide-line-numbers="true"><a href="https://gist.github.com/ayapi/7592669">https://gist.github.com/ayapi/7592669</a> Line:2</code></p>
<p><code>DateUtils</code>クラスでの明日と1週間後の計算ゎこんなかんじでかんたんです</p>
<p><code data-gist-id="7592669" data-gist-line="15-16"><a href="https://gist.github.com/ayapi/7592669">https://gist.github.com/ayapi/7592669</a> Line:15-16</code></p>
<p>もし昨日とかがほしければ<code>addDays</code>で負の値を足せばできます</p>
<p>それで<code>JXDatePicker</code>のインスタンスに、<br>ぃっからぃっまで選択可能にするのかを指定します<br><code data-gist-id="7592669" data-gist-line="18-20"><a href="https://gist.github.com/ayapi/7592669">https://gist.github.com/ayapi/7592669</a> Line:18-20</code></p>
<h3><a name="みためを整ぇる" class="anchor" href="#みためを整ぇる"><span class="header-link"></span></a>みためを整ぇる</h3>
<p>以上のコードで動くにゎ動くんですけど、<br>デフォだと、バツ印が真っ赤で、ちょっと派手すぎって思ぅ時がぁります</p>
<p>バツ印の色を変ぇるにゎ<code>UIManager</code>のUIプロパティで色を指定します</p>
<p><code data-gist-id="7592669" data-gist-line="22"><a href="https://gist.github.com/ayapi/7592669">https://gist.github.com/ayapi/7592669</a> Line:22</code></p>
<p>このょーにUIプロパティーを変ぇた時ゎ、<br>値を変ぇたことをUIに適用(更新)するのが必要で、<br><code>JComponent</code>の<code>updateUI()</code>メソッドもしくゎ<br><code>SwingUtilities.updateComponentTreeUI()</code>どちらかをっかぃます</p>
<p>それで適用してみると、バツの色がちゃんと変ぇれました！</p>
<p><img src="/images/jxdatepicker_restriction_default_color.png" alt="JXDatePickerデフォルトカラー"> <img src="/images/jxdatepicker_restriction_custom_color.png" alt="JXDatePickerカスタムカラー"></p>
<h3><a name="syntheticaをぁててる時の注意" class="anchor" href="#syntheticaをぁててる時の注意"><span class="header-link"></span></a>Syntheticaをぁててる時の注意</h3>
<p>ちょっと話ずれるんですけど、<br>Swingのみためを一気にかっこょくしてくれる<br><a href="http://www.jyloo.com/synthetica/">Synthetica</a>ってゅーテーマ集がぁります<br>ぁゃぴも<a href="http://www.jyloo.com/synthetica/screenshots/blackeye/">BlackEye</a>を入れてテンションをぁげてます</p>
<p>けどSyntheticaをふつーに入れてるだけだと、<br>JXDatePickerがそも②動きません！<br>まったくぉなじエラーで困ってる人がぃました<br><a href="http://stackoverflow.com/questions/17467188/jxdatepicker-with-synthetica-aluoxide-look-and-feel-not-working">jxdatepicker with Synthetica Aluoxide look and feel not working - Stack Overflow</a></p>
<p>Syntheticaをっかってる状態でJXDatePickerを動かすにゎ<br><a href="http://www.jyloo.com/syntheticaaddons/">SyntheticaAddons</a>も入れれば動くょーになります</p>
<p>ちなむとSynthetica BlackEyeをぁてたらこんなかんじです<br>ゃっぱかっこぃぃ＼(^o^)／</p>
<p><img src="/images/jxdatepicker_with_blackeye.png" alt="JXDatePickerとSynthetica BlackEye"></p>
<h3><a name="完成ばん" class="anchor" href="#完成ばん"><span class="header-link"></span></a>完成ばん</h3>
<p>てことで、できたコードがこれですー＼(^o^)／</p>
<p><code data-gist-id="7592669"><a href="https://gist.github.com/ayapi/7592669">https://gist.github.com/ayapi/7592669</a></code></p>
]]></description><link>http://ayapi.github.io/posts/daterestrictiononjxdatepicker/</link><guid isPermaLink="true">http://ayapi.github.io/posts/daterestrictiononjxdatepicker/</guid><category><![CDATA[Java]]></category><category><![CDATA[Swing]]></category><dc:creator><![CDATA[ぁゃぴ]]></dc:creator><pubDate>Wed, 27 Nov 2013 11:34:00 GMT</pubDate></item><item><title><![CDATA[階調反転フィルターJava Swing/JLayer]]></title><description><![CDATA[<h2><a name="swingにっぃて" class="anchor" href="#swingにっぃて"><span class="header-link"></span></a>Swingにっぃて</h2>
<p>Swingゎ、JavaのGUIツールキットでとても有名なゃっです<br>JavaのGUIゎ、最近ゎJavaFX2とかもぁります<br>けど、ぁゃぴゎぃまメインでさゎってるSDKがSwingベースだから、<br>部分的にJavaFX2をっかってみたりしてゎぃるものの、<br>Swingの勉強もだぃぶ必要です</p>
<h2><a name="swingのjlayer" class="anchor" href="#swingのjlayer"><span class="header-link"></span></a>SwingのJLayer</h2>
<p>Swingにぉぃてゎ、JLayerクラス(JXLayerの派生)をっかって、<br>フィルターをっくることができ、<br>Oracle公式サイトに、とてもゎかりゃすぃ解説ページがぁります<br><a href="http://www.oracle.com/technetwork/jp/articles/java/jlayer-439461-ja.html">JLayerを使用したコンポーネントのデコレート方法 - Oracle</a><br>今回ゎこの解説にでてくるBlurエフェクトのサンプルを特に参考にします</p>
<p>ぁとRGB変換でゎ以下のサンプルが参考になります<br><a href="http://terai.xrea.jp/Swing/ColorChannelSwapFilter.html">JLayerを使ってJProgressBarの色相を変更する - Java Swing Tips - てんぷらメモ</a><br>↑ぃっぱぃSwingのサンプルが載ってて、すばらしぃです</p>
<h2><a name="jlayerで階調反転" class="anchor" href="#jlayerで階調反転"><span class="header-link"></span></a>JLayerで階調反転</h2>
<p>てゎけでさっそく、階調反転をSwingのJLayerでゃってみます</p>
<h3><a name="layeruiサブクラス" class="anchor" href="#layeruiサブクラス"><span class="header-link"></span></a>LayerUIサブクラス</h3>
<h4><a name="最小構成" class="anchor" href="#最小構成"><span class="header-link"></span></a>最小構成</h4>
<p>まず、<code>LayerUI</code>のサブクラスをかきます</p>
<blockquote>
<p><a href="http://www.oracle.com/technetwork/jp/articles/java/jlayer-439461-ja.html">JLayerを使用したコンポーネントのデコレート方法 - Oracle</a><br>LayerUIクラスのpaint()メソッドを使用すると、コンポーネントの描画方法を完全にコントロールできます。</p>
</blockquote>
<p>たとぇばまったくなにもぃじらなぃ<code>paint</code>メソッドゎこぅです</p>
<pre><code class="lang-java"><div class="highlight"><pre><span class="kd">public</span> <span class="kd">class</span> <span class="nc">InvertColorLayerUI</span> <span class="kd">extends</span> <span class="n">LayerUI</span><span class="o">&lt;</span><span class="n">JComponent</span><span class="o">&gt;</span> <span class="o">{</span>
    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">paint</span><span class="o">(</span><span class="n">Graphics</span> <span class="n">g</span><span class="o">,</span> <span class="n">JComponent</span> <span class="n">c</span><span class="o">)</span> <span class="o">{</span>
        <span class="kd">super</span><span class="o">.</span><span class="na">paint</span><span class="o">(</span><span class="n">g</span><span class="o">,</span> <span class="n">c</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</pre></div>
</code></pre>
<h4><a name="オフスクリーンイメージの追加" class="anchor" href="#オフスクリーンイメージの追加"><span class="header-link"></span></a>オフスクリーンイメージの追加</h4>
<p>Oracle公式のBlurサンプルでも、てんぷらメモの色相サンプルでも、<br>オフスクリーンイメージがっかゎれてます<br>みぇなぃ画像に先にレンダリングしとぃて、ぁとから一気に表示する、<br>ってゃりかたで、これゎべっにJavaにゎ限らず、<br>グラフィック系でゎどこででもでてくるゃりかたです</p>
<p>まだフィルターゎなにもかけなぃで、<br>オフスクリーンイメージのしくみだけ追加するとこーなります</p>
<pre><code class="lang-java"><div class="highlight"><pre><span class="kd">public</span> <span class="kd">class</span> <span class="nc">InvertColorLayerUI</span> <span class="kd">extends</span> <span class="n">LayerUI</span><span class="o">&lt;</span><span class="n">JComponent</span><span class="o">&gt;</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="n">BufferedImage</span> <span class="n">bufferedImage</span><span class="o">;</span>
    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">paint</span><span class="o">(</span><span class="n">Graphics</span> <span class="n">g</span><span class="o">,</span> <span class="n">JComponent</span> <span class="n">c</span><span class="o">)</span> <span class="o">{</span>
        <span class="kt">int</span> <span class="n">w</span> <span class="o">=</span> <span class="n">c</span><span class="o">.</span><span class="na">getWidth</span><span class="o">();</span>
        <span class="kt">int</span> <span class="n">h</span> <span class="o">=</span> <span class="n">c</span><span class="o">.</span><span class="na">getHeight</span><span class="o">();</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">w</span> <span class="o">==</span> <span class="mi">0</span> <span class="o">||</span> <span class="n">h</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="k">return</span><span class="o">;</span>

        <span class="c1">//オフスクリーンイメージがなかったり大きさがちがってたら生成する</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">bufferedImage</span> <span class="o">==</span> <span class="kc">null</span>
                <span class="o">||</span> <span class="n">bufferedImage</span><span class="o">.</span><span class="na">getWidth</span><span class="o">()</span> <span class="o">!=</span> <span class="n">w</span>
                <span class="o">||</span> <span class="n">bufferedImage</span><span class="o">.</span><span class="na">getHeight</span><span class="o">()</span> <span class="o">!=</span> <span class="n">h</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">bufferedImage</span> <span class="o">=</span> <span class="k">new</span> <span class="n">BufferedImage</span><span class="o">(</span><span class="n">w</span><span class="o">,</span> <span class="n">h</span><span class="o">,</span> <span class="n">BufferedImage</span><span class="o">.</span><span class="na">TYPE_INT_ARGB</span><span class="o">);</span>
        <span class="o">}</span>

        <span class="c1">//オフスクリーンイメージにコンポーネントをレンダリングする</span>
        <span class="n">Graphics2D</span> <span class="n">g2</span> <span class="o">=</span> <span class="n">bufferedImage</span><span class="o">.</span><span class="na">createGraphics</span><span class="o">();</span>
        <span class="n">g2</span><span class="o">.</span><span class="na">setClip</span><span class="o">(</span><span class="n">g</span><span class="o">.</span><span class="na">getClip</span><span class="o">());</span>
        <span class="kd">super</span><span class="o">.</span><span class="na">paint</span><span class="o">(</span><span class="n">g2</span><span class="o">,</span> <span class="n">c</span><span class="o">);</span>
        <span class="n">g2</span><span class="o">.</span><span class="na">dispose</span><span class="o">();</span>

        <span class="c1">//オフスクリーンイメージをそのまま画面に描画する</span>
        <span class="n">Image</span> <span class="n">image</span> <span class="o">=</span> <span class="n">c</span><span class="o">.</span><span class="na">createImage</span><span class="o">(</span><span class="n">bufferedImage</span><span class="o">.</span><span class="na">getSource</span><span class="o">());</span>
        <span class="n">g</span><span class="o">.</span><span class="na">drawImage</span><span class="o">(</span><span class="n">image</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="n">c</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</pre></div>
</code></pre>
<h4><a name="フィルタークラスの追加" class="anchor" href="#フィルタークラスの追加"><span class="header-link"></span></a>フィルタークラスの追加</h4>
<p>それで、オフスクリーンイメージをそのまま画面に描画するんじゃなく、<br>オフスクリーンイメージに対してフィルターをかけるんですけど、<br>フィルターゎ<code>RGBImageFilter</code>を継承してっくるのがぃぃそぅです<br>ゃっとここで、階調反転そのものをかきます</p>
<p><code data-gist-id="7660869" data-gist-line="33-40"><a href="https://gist.github.com/ayapi/7660869">https://gist.github.com/ayapi/7660869</a> Line:33-40</code></p>
<p>このビット演算ゎ、Aゎ関係なぃので取り出してそのままの値で、<br>RGBゎ取り出して反転して、<br>AとRGBをまたぁゎせて返しましょぅ、とゅー内容です<br>このへんゎSwingだからって特別なとこゎなにもなぃです／(^o^)＼</p>
<h4><a name="paintメソッド内でフィルターを適用" class="anchor" href="#paintメソッド内でフィルターを適用"><span class="header-link"></span></a>paintメソッド内でフィルターを適用</h4>
<p>それで<code>LayerUI</code>サブクラスの<code>paint</code>メソッドの最後の描画の前で<br>このフィルタークラスを適用するょーにします</p>
<p><code data-gist-id="7660869" data-gist-line="25-30"><a href="https://gist.github.com/ayapi/7660869">https://gist.github.com/ayapi/7660869</a> Line:25-30</code></p>
<p>これで<code>LayerUI</code>サブクラスゎ完成です＼(^o^)／</p>
<h3><a name="jlayerにコンポーネントとlayeruiを指定する" class="anchor" href="#jlayerにコンポーネントとlayeruiを指定する"><span class="header-link"></span></a>JLayerにコンポーネントとLayerUIを指定する</h3>
<p>たとぇばパネルをソースにしてフィルターをかけるとすれば、<br>こーゅーふうに指定します<br>(実際にっかぅ時ゎ空のパネルじゃなくてぃろ②追加するんですけど)</p>
<p><code data-gist-id="7660869" data-gist-line="48-50"><a href="https://gist.github.com/ayapi/7660869">https://gist.github.com/ayapi/7660869</a> Line:48-50</code></p>
<p>そして<code>layer</code>だけを親のフレームとかに<code>add</code>します<br><code>panel</code>ゃ<code>layerUI</code>ゎもぅ<code>add</code>しなぃです</p>
<h3><a name="完成ばん" class="anchor" href="#完成ばん"><span class="header-link"></span></a>完成ばん</h3>
<p>とゅーゎけで、できたコードがこれですー！</p>
<p><code data-gist-id="7660869"><a href="https://gist.github.com/ayapi/7660869">https://gist.github.com/ayapi/7660869</a></code></p>
]]></description><link>http://ayapi.github.io/posts/colorinvertjlayer/</link><guid isPermaLink="true">http://ayapi.github.io/posts/colorinvertjlayer/</guid><category><![CDATA[Java]]></category><category><![CDATA[Swing]]></category><dc:creator><![CDATA[ぁゃぴ]]></dc:creator><pubDate>Tue, 26 Nov 2013 22:27:00 GMT</pubDate></item></channel></rss>